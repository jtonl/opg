events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Log format for OPA policy decisions
    log_format opa_log '$remote_addr - $remote_user [$time_local] '
                      '"$request" $status $body_bytes_sent '
                      '"$http_referer" "$http_user_agent" '
                      'opa_decision="$upstream_http_x_opa_decision" '
                      'opa_reason="$upstream_http_x_opa_reason"';

    access_log /var/log/nginx/access.log opa_log;

    upstream php_app {
        server app:8000;
    }

    upstream opa_server {
        server opa:8181;
    }

    # Rate limiting zone
    limit_req_zone $binary_remote_addr zone=api_rate_limit:10m rate=100r/m;

    server {
        listen 80;
        server_name localhost;

        # Health check endpoint (bypass OPA)
        location /health {
            return 200 "OK";
            add_header Content-Type text/plain;
        }

        # API endpoints with OPA authorization
        location ~ ^/(hello|api) {
            # Apply rate limiting
            limit_req zone=api_rate_limit burst=10 nodelay;

            # Internal subrequest to OPA for authorization
            auth_request /opa_auth;

            # Set headers for OPA decision logging
            auth_request_set $opa_decision $upstream_http_x_opa_decision;
            auth_request_set $opa_reason $upstream_http_x_opa_reason;
            
            # Add OPA decision headers to response
            add_header X-OPA-Decision $opa_decision;
            add_header X-OPA-Reason $opa_reason;

            # Proxy to PHP application
            proxy_pass http://php_app;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Internal OPA authorization endpoint
        location = /opa_auth {
            internal;
            proxy_pass http://opa_server/v1/data/api/security/decision;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header X-Original-Method $request_method;
            proxy_set_header X-Original-Args $args;
            proxy_set_header X-Original-User-Agent $http_user_agent;
            proxy_set_header Content-Type "application/json";
            
            # Create JSON input for OPA
            set $opa_input '{"method": "$request_method", "path": "$uri", "query_params": {"name": "$arg_name"}, "headers": {"user-agent": "$http_user_agent"}, "request_count": 1, "time_window": "minute"}';
            proxy_set_body $opa_input;
            proxy_method POST;
        }

        # Default location for other requests
        location / {
            return 404 "Not Found";
        }
    }

    # Admin interface for OPA (development only)
    server {
        listen 8080;
        server_name localhost;

        location / {
            proxy_pass http://opa_server;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
}